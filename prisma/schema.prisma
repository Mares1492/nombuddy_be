generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account_data {
  id                        Int                         @id(map: "account_data_pk") @default(autoincrement())
  account_id                String                      @db.VarChar(100)
  organisation_name         String                      @db.VarChar(100)
  finance_data_account_data finance_data_account_data[]
}

model discount {
  id               Int           @id(map: "discount_pk")
  start            DateTime      @db.Timestamp(6)
  end              DateTime      @db.Timestamp(6)
  code             String        @db.Uuid
  percentage       Decimal       @db.Decimal
  discount_type_id Int
  menu_position_id Int
  menu_position    menu_position @relation(fields: [menu_position_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "discount_discount__fk")
  discount_type    discount_type @relation(fields: [discount_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "discount_discount_type")
}

model discount_type {
  id       Int        @id(map: "discount_type_pk") @default(autoincrement())
  name     String     @db.VarChar(20)
  discount discount[]
}

model finance_data {
  id                        Int                         @id(map: "finance_data_pk") @default(autoincrement())
  finance_data_account_data finance_data_account_data[]
  restaurant_finance_data   restaurant_finance_data[]
}

model finance_data_account_data {
  id              Int          @id(map: "finance_data_account_data_pk") @default(autoincrement())
  finance_data_id Int
  account_data_id Int
  account_data    account_data @relation(fields: [account_data_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "finance_data_account_data_account_data")
  finance_data    finance_data @relation(fields: [finance_data_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "finance_data_finance_data_account_data")
}

model image {
  id            Int        @id(map: "image_pk") @default(autoincrement())
  restaurant_id Int
  name          Int
  binary        Bytes
  filename      String     @db.VarChar(100)
  content_type  String     @db.VarChar(50)
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "image_restaurant")
}

model menu {
  id                 Int                  @id(map: "menu_pk") @default(autoincrement())
  name               String               @db.VarChar(30)
  menu_type_id       Int
  description        String?              @db.VarChar(400)
  menu_type          menu_type            @relation(fields: [menu_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "menu_menu_types")
  menu_category_menu menu_category_menu[]
  restaurant_menu    restaurant_menu[]
}

model menu_type {
  id   Int    @id(map: "menu_type_pk") @default(autoincrement())
  name String @db.VarChar(10)
  menu menu[]
}

model option {
  id              Int               @id(map: "option_pk") @default(autoincrement())
  name            String            @db.VarChar(100)
  description     String?           @db.VarChar(100)
  position_option position_option[]
}

model order {
  id                  Int                   @id(map: "order_pk") @default(autoincrement())
  order_number        Int
  display_id          String                @db.Uuid
  orderer_email       String                @db.VarChar(50)
  order_time          DateTime              @db.Timestamp(6)
  expected_serve_time DateTime              @db.Timestamp(6)
  serve_time          DateTime              @db.Timestamp(6)
  order_state_id      Int
  is_deleted          Boolean               @default(false)
  order_state         order_state           @relation(fields: [order_state_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_order_state")
  order_menu_position order_menu_position[]
}

model order_state {
  id    Int     @id(map: "order_state_pk") @default(autoincrement())
  name  String  @db.VarChar(20)
  order order[]
}

model person {
  id                Int                 @id(map: "person_pk") @default(autoincrement())
  name              String              @db.VarChar(100)
  email             String              @db.VarChar(120)
  restaurant_person restaurant_person[]
}

model position {
  id              Int               @id(map: "position_pk") @default(autoincrement())
  name            String            @db.VarChar(30)
  description     String?           @db.VarChar(200)
  display_options Boolean
  display_price   Boolean
  price           Decimal           @db.Money
  menu_position   menu_position[]
  position_option position_option[]
}

model position_option {
  id          Int      @id(map: "position_option_pk") @default(autoincrement())
  option_id   Int
  position_id Int
  description String?  @db.VarChar(100)
  option      option   @relation(fields: [option_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "entity_1_position_option")
  position    position @relation(fields: [position_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "position_position_option")
}

model restaurant {
  id                                                        Int                          @id(map: "restaurant_pk") @default(autoincrement())
  formal_name                                               String
  display_name                                              String                       @db.VarChar(30)
  image_id                                                  Int?
  restaurant_state_id                                       Int                          @default(2)
  image                                                     image[]
  restaurant_state                                          restaurant_state             @relation(fields: [restaurant_state_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "restaurant_restaurant_state")
  restaurant_finance_data                                   restaurant_finance_data[]
  restaurant_menu_restaurant_menu_restaurant_idTorestaurant restaurant_menu[]            @relation("restaurant_menu_restaurant_idTorestaurant")
  restaurant_role                                           restaurant_role[]
  restaurant_type_restaurant                                restaurant_type_restaurant[]
  style                                                     style[]
}

model restaurant_finance_data {
  id              Int          @id(map: "restaurant_finance_data_pk") @default(autoincrement())
  restaurant_id   Int
  finance_data_id Int
  finance_data    finance_data @relation(fields: [finance_data_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "finance_data_restaurant_finance_data")
  restaurant      restaurant   @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "restaurant_restaurant_finance_data")
}

model restaurant_menu {
  id                                                   Int        @id(map: "restaurant_menu_pk") @default(autoincrement())
  menu_id                                              Int
  restaurant_id                                        Int
  menu                                                 menu       @relation(fields: [menu_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "restaurant_menu_menu")
  restaurant_restaurant_menu_restaurant_idTorestaurant restaurant @relation("restaurant_menu_restaurant_idTorestaurant", fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "restaurant_menu_restaurant")
}

model restaurant_person {
  id                 Int             @id(map: "restaurant_person_pk") @default(autoincrement())
  person_id          Int
  restaurant_role_id Int
  refresh_token      String?
  access_token       String?
  person             person          @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "restaurant_person_person")
  restaurant_role    restaurant_role @relation(fields: [restaurant_role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "restaurant_person_restaurant_role")
}

model restaurant_role {
  id                  Int                 @id(map: "restaurant_role_pk") @default(autoincrement())
  role_id             Int
  restaurant_id       Int
  discount_code       String              @db.Uuid
  discount_percentage Decimal             @db.Decimal
  is_admin            Boolean?            @default(false)
  restaurant_person   restaurant_person[]
  restaurant          restaurant          @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "restaurant_role_restaurant")
  role                role                @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "restaurant_role_role")
}

model restaurant_state {
  id         Int          @id(map: "restaurant_state_pk") @default(autoincrement())
  name       String       @db.VarChar(10)
  restaurant restaurant[]
}

model restaurant_type {
  id                         Int                          @id(map: "restaurant_type_pk") @default(autoincrement())
  name                       String                       @db.VarChar(30)
  restaurant_type_restaurant restaurant_type_restaurant[]
}

model role {
  id              Int               @id(map: "role_pk") @default(autoincrement())
  name            String            @db.VarChar(50)
  description     String?           @db.VarChar(300)
  restaurant_role restaurant_role[]
}

model style {
  id            Int        @id(map: "style_pk") @default(autoincrement())
  restaurant_id Int
  button_style  Int
  heading_style Int
  border_style  Int
  text_style    Int
  button_color  Int
  heading_color Int
  border_color  Int
  text_color    Int
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "style_restaurant")
}

model menu_category {
  id                 Int                  @id(map: "category_pk") @default(autoincrement())
  name               String               @db.VarChar(30)
  description        String?              @db.VarChar(30)
  menu_category_menu menu_category_menu[]
}

model menu_position {
  id                    Int                   @id(map: "category_position_pk") @default(autoincrement())
  menu_category_menu_id Int
  position_id           Int?
  is_available          Boolean               @default(true)
  discount              discount[]
  menu_category_menu    menu_category_menu    @relation(fields: [menu_category_menu_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "menu_position_menu")
  position              position?             @relation(fields: [position_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "position_association_1")
  order_menu_position   order_menu_position[]
}

model order_menu_position {
  id               Int           @id(map: "order_category_position_pk") @default(autoincrement())
  order_id         Int
  menu_position_id Int
  chosen_options   Int
  is_done          Boolean       @default(false)
  order            order         @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_categories_order")
  menu_position    menu_position @relation(fields: [menu_position_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_menu_position_menu_position_id_fk")
}

model menu_category_menu {
  id               Int             @id(map: "menu_category_pk") @default(autoincrement())
  menu_id          Int
  menu_category_id Int
  menu_category    menu_category   @relation(fields: [menu_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "category_menu_category")
  menu             menu            @relation(fields: [menu_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "menu_menu_category")
  menu_position    menu_position[]
}

model restaurant_type_restaurant {
  id                 Int             @id(map: "restaurant_restaurant_type_pk") @default(autoincrement())
  restaurant_type_id Int
  restaurant_id      Int
  restaurant         restaurant      @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "restaurant_type_restaurant_restaurant_id_fk")
  restaurant_type    restaurant_type @relation(fields: [restaurant_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "restaurant_type_restaurant_restaurant_type_id_fk")
}
